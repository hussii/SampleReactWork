import React, { Component } from "react";
import { connect } from "react-redux";
import { withRouter } from "react-router-dom";
import { getViewingDocument } from "Actions";
import { makeStyles } from '@material-ui/styles';
import WidgetsIcon from '@material-ui/icons/Widgets';
import PeopleIcon from '@material-ui/icons/People';
import SettingsIcon from '@material-ui/icons/Settings';
import BrushIcon from '@material-ui/icons/Brush';
import TextFieldsIcon from '@material-ui/icons/TextFields';
import DateRangeIcon from '@material-ui/icons/DateRange';
import Button from '@material-ui/core/Button';
import NavPanel from "Components/document-viewer/nav-panel";
import ActionPanel from "Components/document-viewer/action-panel";
import PDFViewer from "Container/documents/pdf-viewer";
import RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';
import SnackbarContent from '@material-ui/core/SnackbarContent';
import Snackbar from '@material-ui/core/Snackbar';
import Slide from '@material-ui/core/Slide';
import MobileStepper from '@material-ui/core/MobileStepper';
import * as PdfJs from 'pdfjs-dist';
import config from 'Constants/AppConfig';
import { getGuid } from "Helpers/helpers";
import { createWorkFlow } from "Actions";

const useStyles = makeStyles({
    documentViewerContainer: {
        height: "calc(100vh - 83px)",
        background: "white",
        display: "flex",
        flexDirection: 'row'
    },
    documentActionPanel: {
        width: '300px',
        overflowY: "auto"
    },
    documentNavPanel: {
        width: '76px',
        backgroundColor: '#F9F9F9'
    },
    documentViewer: {
        width: "calc(100% - 376px)",
        backgroundColor: '#dee2e6'
    }
});

const navPanelItems = [
    {
        Id: 1,
        Icon: <WidgetsIcon />,
        Text: "Fields"
    },
    {
        Id: 2,
        Icon: <PeopleIcon />,
        Text: "Recipients"
    },
    {
        Id: 3,
        Icon: <SettingsIcon />,
        Text: "Settings"
    }
];

const fieldActions = [
    { Id: 1, Icon: <BrushIcon />, Text: "SIGNATURE", Disabled: false },
    { Id: 2, Icon: <TextFieldsIcon />, Text: 'TEXTFIELD', Disabled: true },
    { Id: 3, Icon: <DateRangeIcon />, Text: 'DATE', Disabled: true }
];

var pdf3 = atob('' +
    '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' +
    '' +
    '' +
    '' +
    '' +
    'MDAwMDI0IDY1NTM1IGYNCjAwMDAwMDAwMjUgNjU1MzUgZg0KMDAwMDAwMDAyNiA2NTUzNSBmDQowMDAwMDAwMDI3IDY1NTM1IGYNCjAwMDAwMDAwMjggNjU1MzUgZg0KMDAwMDAwMDAyOSA2NTUzNSBmDQowMDAwMDAwMDMwIDY1NTM1IGYNCjAwMDAwMDAwMzEgNjU1MzUgZg0KMDAwMDAwMDAzMiA2NTUzNSBmDQowMDAwMDAwMDMzIDY1NTM1IGYNCjAwMDAwMDAwMzQgNjU1MzUgZg0KMDAwMDAwMDAzNSA2NTUzNSBmDQowMDAwMDAwMDM2IDY1NTM1IGYNCjAwMDAwMDAwMzcgNjU1MzUgZg0KMDAwMDAwMDAzOCA2NTUzNSBmDQowMDAwMDAwMDM5IDY1NTM1IGYNCjAwMDAwMDAwNDAgNjU1MzUgZg0KMDAwMDAwMDA0MSA2NTUzNSBmDQowMDAwMDAwMDQyIDY1NTM1IGYNCjAwMDAwMDAwNDMgNjU1MzUgZg0KMDAwMDAwMDA0NCA2NTUzNSBmDQowMDAwMDAwMDQ1IDY1NTM1IGYNCjAwMDAwMDAwNDYgNjU1MzUgZg0KMDAwMDAwMDA0NyA2NTUzNSBmDQowMDAwMDAwMDQ4IDY1NTM1IGYNCjAwMDAwMDAwNDkgNjU1MzUgZg0KMDAwMDAwMDA1MCA2NTUzNSBmDQowMDAwMDAwMDAwIDY1NTM1IGYNCjAwMDAwMDI5OTMgMDAwMDAgbg0KMDAwMDAwMzIyMCAwMDAwMCBuDQowMDAwMDM0MjEwIDAwMDAwIG4NCjAwMDAwMzczNzcgMDAwMDAgbg0KMDAwMDAzNzQyMiAwMDAwMCBuDQp0cmFpbGVyDQo8PC9TaXplIDU2L1Jvb3QgMSAwIFIvSW5mbyAxMSAwIFIvSURbPDkwMEQ0RjNERUM1MzE4NEVBODE5NEVBNDAxMjUyRDI4Pjw5MDBENEYzREVDNTMxODRFQTgxOTRFQTQwMTI1MkQyOD5dID4+DQpzdGFydHhyZWYNCjM3Nzc0DQolJUVPRg0KeHJlZg0KMCAwDQp0cmFpbGVyDQo8PC9TaXplIDU2L1Jvb3QgMSAwIFIvSW5mbyAxMSAwIFIvSURbPDkwMEQ0RjNERUM1MzE4NEVBODE5NEVBNDAxMjUyRDI4Pjw5MDBENEYzREVDNTMxODRFQTgxOTRFQTQwMTI1MkQyOD5dIC9QcmV2IDM3Nzc0L1hSZWZTdG0gMzc0MjI+Pg0Kc3RhcnR4cmVmDQozOTA1MQ0KJSVFT0Y=');

const baseDataUrl = config.apiDataBaseUrl;

const DocumentViewerLayout = function (props) {
    console.log('DocumentViewerLayout props:', props);
    const classes = useStyles();

    return (
        <div className={classes.documentViewerContainer}>
            <div className={classes.documentViewer}>
                <PDFViewer
                    onDropSign={props.onDropSign}
                    setSelectedSign={props.setSelectedSign}
                    selectedSign={props.selectedSign}
                    anchorEl={props.anchorEl}
                    setAnchorEl={props.setAnchorEl}
                    deleteSelectedSign={props.deleteSelectedSign}
                    duplicateSelectedSign={props.duplicateSelectedSign}
                    signs={props.signs}
                    handleMouseDown={props.handleMouseDown}
                    selectedUsers={props.selectedUsers}
                    onSelectUser={props.onSelectUser}
                    onDeleteRecipient={props.onDeleteRecipient}
                    onDeSelectUser={props.onDeSelectUser}
                    signRecipientsCount={props.signRecipientsCount}
                    pdf={props.pdf}
                    scale={props.scale}
                    selectNextUnassignedSignature={props.selectNextUnassignedSignature}
                    assignAllSignature={props.assignAllSignature}
                    setSignDimentions={props.setSignDimentions}
                />
            </div>
            <div className={classes.documentActionPanel}>
                <ActionPanel
                    actionType={props.actionType}
                    fieldActionItems={fieldActions}
                    onSelectUser={props.onSelectUser}
                    onDeSelectUser={props.onDeSelectUser}
                    selectedUsers={props.selectedUsers}
                    selectedSign={props.selectedSign}
                    onSelectRecipient={props.onSelectRecipient}
                    deleteSignature={props.deleteSelectedSign}
                    removeRecipient={props.removeRecipient}
                    closeSignatureSettings={props.handleMouseDown}
                    onDeleteRecipient={props.onDeleteRecipient}
                />
            </div>
            <div className={classes.documentNavPanel}>
                <NavPanel navPanelItems={navPanelItems}
                    onNavPanelItemClick={props.onNavPanelItemClick}
                    onClickSend={props.onClickSend}
                    actionType={props.actionType}
                />
            </div>
        </div>
    );
}

class UserDocumentViewer extends Component {
    constructor(props) {
        super(props);
        this.state = {
            selectedNavPanelItem: 'Fields',
            signs: [],
            signRecipientsCount: null,
            selectedSign: null,
            anchorEl: null,
            selectedUsers: [],
            pdf: null,
            scale: 1,
            signWidth: 120,
            signHeight: 50,
            selectedRecipient: null
        }
    }

    onSelectUser = (user) => {
        if (this.state.selectedUsers.indexOf(user) !== -1) return;

        this.setState({
            selectedUsers: [...this.state.selectedUsers, user]
        });
    }

    onDeSelectUser = (id) => {
        this.setState({
            selectedUsers: [...this.state.selectedUsers.filter(x => x.id != id)]
        })
    }

    onDropSign = (signature) => {
        let newSign = { ...signature, signId: getGuid() }
        var newState = [...this.state.signs, newSign];
        this.setState({
            signs: newState,
            selectedSign: null
        })
    }

    handleMouseDown = (e) => {
        console.log('handle mouse down called');
        this.setState({
            selectedSign: null,
            anchorEl: null
        });
    }

    setAnchorEl = (e, el) => {
        if (e) e.stopPropagation();
        this.setState({
            anchorEl: el
        });
    }

    setSelectedSign = (sign, ev) => {
        if (ev) ev.stopPropagation();

        this.setState({
            selectedSign: sign,
            selectedNavPanelItem: 'Fields'
        });
    }

    deleteSelectedSign = (sign) => {
        this.setState({
            signs: this.state.signs.filter(s => s != sign),
            selectedSign: null
        });
    }

    duplicateSelectedSign = (sign) => {
        sign.signId = getGuid();

        this.setState({
            signs: [...this.state.signs, sign]
        });
    }

    onClickSignature = () => {
        this.setState({
            selectedNavPanelItem: 'Fields'
        });
    }

    onNavPanelItemClick = (item) => {
        console.log('clicked item:', item);
        this.setState({
            selectedNavPanelItem: item.Text
        });
    }

    onClickSend = () => {
        let recipientsCount = this.state.signs.reduce((count, sign) => {
            if (sign.recipient) count += 1;
            return count;
        }, 0);

        if (recipientsCount === this.state.signs.length) {
            recipientsCount = null;

            const workflowReqObj = this.createWorkFlowRequest();
            // console.log('workflowReqObj:', JSON.stringify(workflowReqObj));
            this.props.createWorkFlow(workflowReqObj);
            return;
        }

        this.setState({
            signRecipientsCount: recipientsCount
        });
    }

    getCollaboratorObj = (user) => ({
        "companyID": "dff86140-04f7-4f60-91b5-b97b5b546b77",
        "userID": user.id,
        "status": 0,
        "action": "SIGNER",
        "signatureType": "ADVANCED",
        "metadata": "Metadata if any",
        "notes": "Notes if any",
        "isReadCompulsory": false,
        "timeout": "2019-08-03 14:00:00"
    })

    getHobObj = (user) => {
        const { selectedDocument } = this.props;
        if (selectedDocument.documentFiles.length == 0) return null;
        const documentId = selectedDocument.documentFiles[0].id;

        const collaboratorObj = this.getCollaboratorObj(user);
        const userSigns = this.state.signs
            .filter(s => s.recipient && s.recipient.id == user.id);

        if (!userSigns || !userSigns.length) return null;

        var designers = userSigns
            .map(sign => (
                {
                    "documentFilesID": documentId,
                    "type": 0,
                    "name": "Field Name",
                    "value": "Value if any.",
                    "pageNumber": sign.pageNum,
                    "fieldWidth": sign.width,
                    "fieldHeight": sign.height,
                    "fieldX": sign.pageX,
                    "fieldY": sign.pageY
                }
            ));

        return {
            "Collaborators": collaboratorObj,
            "Designers": designers
        }
    }

    getAllHops = () => {
        const hops = [];
        this.state.selectedUsers.forEach(user => {
            const hop = this.getHobObj(user);
            if (hop) {
                hops.push(hop);
            }
        });

        return hops;
    }

    createWorkFlowRequest = () => {
        const { selectedDocument, user } = this.props;

        const workflowReqObj = {
            "name": selectedDocument.name,
            "timeout": "2019-12-30",
            "status": selectedDocument.status,
            "ccRecipients": user.profile.user.email,
            "type": 0,
            "documentsID": selectedDocument.id
        }

        workflowReqObj["hops"] = this.getAllHops();
        return workflowReqObj;
    };

    onSelectRecipient = (user, sign) => {
        this.setState({
            selectedRecipient: user,
            selectedSign: { ...this.state.selectedSign, recipient: user },
            signRecipientsCount: this.state.signRecipientsCount != null ?
                this.state.signRecipientsCount + 1 :
                null,
            signs: this.state.signs.filter(s => {
                if (s.signId === sign.signId) {
                    s.recipient = user;
                }
                return true;
            })
        });
    }

    onDeleteRecipient = (id) => {
        var result = window.confirm("Are you sure you want to delete the recipient?");
        if (result) {
            this.setState({
                selectedUsers: this.state.selectedUsers.filter(x => x.id != id)
            })
        }
    }

    setSignDimentions = (sign, dim) => {
        sign.width = dim.width;
        sign.height = dim.height;

        this.setState({
            selectedSign: sign,
            signs: this.state.signs.filter(s => {
                if (s.signId === sign.signId) {
                    s = sign;
                }
                return true;
            })
        });
    }

    selectNextUnassignedSignature = () => {
        // console.log('selecting signature');
        var tempSign = null;
        for (var i = 0; i < this.state.signs.length; i++) {
            if (this.state.signs[i].recipient == null) {
                tempSign = this.state.signs[i];
                break;
            }
        }

        this.setState({
            selectedSign: tempSign
        });
    }

    assignAllSignature = () => {
        var tempAllSigns = this.state.signs;
        for (var i = 0; i < tempAllSigns.length; i++) {
            if (tempAllSigns[i].recipient == null) {
                tempAllSigns[i].recipient = this.state.selectedRecipient;
            }
        }

        this.setState({
            signs: tempAllSigns
        })
    }

    transitionUp = (props) => {
        return <Slide {...props} direction="up" />;
    }

    componentDidMount() {
        if (!this.props.selectedDocument) {
            this.props.history.push("/app/documents");
            return;
        }

        // let url = baseDataUrl + this.props.selectedDocument.documentFiles[0].path;
        // PdfJs.getDocument({ data: pdfData2 }).then((pdf) => {
        PdfJs.getDocument({ data: pdf3 }).then((pdf) => {
            console.log(pdf);
            this.setState({ pdf });
        }).catch(ex => {
            console.log("ERROR while fetching PDF:", ex);
        });
    }

    render() {

        const { selectedDocument, loading } = this.props;
        console.log('viewingDocument:', selectedDocument);

        if (loading) {
            return (
                <RctSectionLoader />
            )
        }

        return (
            <React.Fragment>
                <DocumentViewerLayout {...this.props}
                    actionType={this.state.selectedNavPanelItem}
                    onNavPanelItemClick={this.onNavPanelItemClick}
                    onClickSend={this.onClickSend}
                    onDropSign={this.onDropSign}
                    signs={this.state.signs}
                    signRecipientsCount={this.state.signRecipientsCount}
                    setSelectedSign={this.setSelectedSign}
                    selectedSign={this.state.selectedSign}
                    anchorEl={this.state.anchorEl}
                    setAnchorEl={this.setAnchorEl}
                    deleteSelectedSign={this.deleteSelectedSign}
                    duplicateSelectedSign={this.duplicateSelectedSign}
                    handleMouseDown={this.handleMouseDown}
                    onSelectUser={this.onSelectUser}
                    selectedUsers={this.state.selectedUsers}
                    onSelectRecipient={this.onSelectRecipient}
                    onDeleteRecipient={this.onDeleteRecipient}
                    onDeSelectUser={this.onDeSelectUser}
                    pdf={this.state.pdf}
                    scale={this.state.scale}
                    selectNextUnassignedSignature={this.selectNextUnassignedSignature}
                    assignAllSignature={this.assignAllSignature}
                    setSignDimentions={this.setSignDimentions}
                />
            </React.Fragment>
        )
    }
}

const mapStateToProps = ({ documents, authUser }) => {
    const { selectedDocument, loading } = documents;
    const { user } = authUser;
    return { selectedDocument, loading, user };
}

export default withRouter(
    connect(mapStateToProps, {
        createWorkFlow
    })(UserDocumentViewer));